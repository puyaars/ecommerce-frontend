// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id            String     @id @default(cuid())
  name          String     @unique
  isSubcat      Boolean    @default(false)
  parent        Category?  @relation(name: "subcat-relation", fields: [parentId], references: [id])
  subcategories Category[] @relation("subcat-relation")
  parentId      String?
  products      Product[]
}

model Brand {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Product {
  id          String            @id @default(cuid())
  name        String
  description String?
  longDesc    String?
  onSale      Boolean
  price       Float?
  category    Category?         @relation(fields: [categoryId], references: [id])
  brand       Brand?            @relation(fields: [brandId], references: [id])
  categoryId  String?
  brandId     String?
  promotion   Promotion?        @relation(fields: [promotionId], references: [id])
  promotionId String?
  orderItem   OrderItem[]
  variants    ProductVariant[]
  properties  ProductProperty[]
  reviews     ProductReview[]
  images      ProductImage[]
}

model ProductProperty {
  id        String  @id @default(cuid())
  name      String
  value     String
  Product   Product @relation(fields: [productId], references: [id])
  productId String
}

model VariantProperty {
  id        String         @id @default(cuid())
  name      String
  value     String
  variant   ProductVariant @relation(fields: [productId], references: [id])
  productId String
}

model ProductReview {
  id        String   @id @default(cuid())
  name      String
  email     String
  rating    Float
  comment   String
  confirmed Boolean  @default(false)
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
}

model ProductVariant {
  id         String            @id @default(cuid())
  name       String
  price      Float
  quantity   Int
  isDefault  Boolean           @default(false)
  product    Product           @relation(fields: [productId], references: [id])
  productId  String
  properties VariantProperty[]
  images     ProductImage[]
  OrderItem  OrderItem[]
}

model ProductImage {
  id        String         @id @default(cuid())
  url       String
  product   Product        @relation(fields: [productId], references: [id])
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId String
  productId String
}

model BillingAddress {
  id        String   @id @default(cuid())
  name      String
  email     String
  address   String
  address2  String?
  street    String
  city      String
  state     String
  zip       String
  country   String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Order     Order[]
}

model Promotion {
  id          String    @id @default(cuid())
  name        String
  description String
  off         Float
  startDate   DateTime
  endDate     DateTime
  products    Product[]
}

model OrderItem {
  id               String         @id @default(cuid())
  product          Product        @relation(fields: [productId], references: [id])
  productId        String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId String
  quantity         Int
  price            Float
  Order            Order?         @relation(fields: [orderId], references: [id])
  orderId          String?
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  DELIVERED
}

model Order {
  id               String         @id @default(cuid())
  billing          BillingAddress @relation(fields: [billingAddressId], references: [id])
  items            OrderItem[]
  status           OrderStatus    @default(PENDING)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now())
  billingAddressId String
}
